#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node using typedef
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode() {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    printf("Enter a number: ");
    scanf("%d", &newNode->data);
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning
void insertAtBeg(Node** head) {
    Node* newNode = createNode();
    newNode->next = *head;
    *head = newNode;
}

// Function to insert a node at the end
void insertEnd(Node** head) {
    Node* newNode = createNode();
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to insert a node at a specific position
void insertAtPosition(Node** head) {
    Node* newNode = createNode();
    int position;
    printf("Enter the position: ");
    scanf("%d", &position);
    
    if (position == 0) {
        newNode->next = *head;
        *head = newNode;
        return;
    }

    Node* temp = *head;
    while(position-- !=1) {
        temp = temp->next;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to display the linked list
void displayList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to free the linked list
void deleteAtBeg(Node** head) {
    Node* temp;
    while (*head != NULL) {
        temp = *head;
        *head = (*head)->next;
        free(temp);
    }
}

// Function to delete a node at a specific position
void deleteAtPosition(Node** head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    Node* temp = *head;
    int position;
    printf("Enter the position: ");
    scanf("%d", &position);
    
    if (position == 0) {
        *head = temp->next;
        free(temp);
        return;
    }

    for (int i = 0; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

    Node* next = temp->next->next;
    free(temp->next);
    temp->next = next;
}

// Function to delete the last node of the linked list
void deleteEnd(Node** head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    Node* temp = *head;
    Node *q = temp->next;
    // If the list has only one node
    
    // Traverse to the second last node
    while (q->next != NULL) {
        temp = temp->next;
        q = q->next;
    }

    // Free the last node
    free(q);
    temp->next = NULL;
}

// Main function to demonstrate the linked list
int main() {
    Node* head = NULL;

    // Inserting nodes
    insertAtBeg(&head);
    insertEnd(&head);
    insertAtPosition(&head);

    // Displaying the linked list
    printf("Linked List: ");
    displayList(head);

    // Deleting nodes
    deleteAtPosition(&head);
    deleteEnd(&head);
    
    // Displaying the linked list after deletions
    printf("Linked List after deletions: ");
    displayList(head);

    // Freeing the linked list
    deleteAtBeg(&head);
    return 0;
}